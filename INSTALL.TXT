.. This file is written in ReStructuredText and used to generate the content of some web pages
.. vim:ft=rst

Installation instructions for Debian based systems
==================================================

#. Get the development files::

   cd /usr/local/
   hg clone http://dev.grical.org:8001 gridcalendar

  You can then update your local copy with the newest changes anytime with the commands::

   hg pull
   hg update

#. Install the following packages and their dependencies: ``python python-django python-django-registration python-django-tagging python-docutils python-dateutil python-geoip python-vobject binutils python-setuptools python-gdal python-yaml postgresql-9.1 python-psycopg2 postgresql-9.1-postgis libgeos-c1 python-tz django-tables``

    - python-django must be at least Version 1.3

#. Install ``blist``::

    aptitude install gcc
    aptitude install python2.6-dev
    aptitude install python-pip
    pip install blist

#. Install ``django-celery`` and dependencies::

    apt-get install rabbitmq-server
    pip install django-celery

#. Install the `proper version of django-reversion`__ for the installed Django version.

    #. If you have already a database running and have some data or you import data e.g. with
       ``manage.py loadata``, you should create manually a first revision, for this issue the
       commands::

        ./manage.py createinitialrevisions
        ./manage.py createrevisioninfo

__ https://github.com/etianen/django-reversion/wiki/Compatible-Django-Versions

#. Install ``django-oembed`` which will embedurl content using the oEmbed_ standard. There are many
forks of ``django-oembed``. Choose one carefully taking into consideration security and privacy
issues: an external package can contain malicious code and oEmbeds from some sites can contain
tracking javascript code and the like. Unfortunately there is no simple way to make this package
optional in Django. This remains as a TODO. See
http://www.codekoala.com/blog/2009/django-tip-application-specific-templates/

    #. Install a version of ``djando-oembed`` (there are many at github_). Example::

        aptitude install git
        pip install -e git+git://github.com/ixc/django-oembed.git#egg=django-oembed

#. If you want to use memcached_ (not necessary but highly recommended as GriCal is designed to use it for performance):

    #. Install the needed software::

        aptitude install memcached
        pip install python-memcached

    #. Configure memcached_::

        vim /etc/memcached.conf
        /etc/init.d/memcached restart

.. _memcached: http://memcached.org/

#. GriCal can log into an IRC channel. To use the IRC logger, install ``python-irclib``.
Configure the appropiate parameters in ``settings_local.py``. When GriCal is running, you can start
the IRC logger with::

    ./manage.py irclogger

#. If you want to be able to locate cities by the user's IPs, you need to install the data base of
   Maxmind.com which askes you to mention it. Read http://geolite.maxmind.com/download/geoip/database/LICENSE.txt
   Using this data improves the front page, search results and the introduction of addresses of events.
   You can install it with ``geoip-database-contrib`` or following the steps::
    
    cd /usr/share/GeoIP
    wget http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz
    gzip -d GeoLiteCity.dat.gz

#. Create and edit ``settings_local.py`` (see as example ``settings_local.py.example``)

#. Run the celery worker server. See `Running Celery as a daemon`__. Example::

    python manage.py celeryd -l info

__ http://docs.celeryq.org/en/latest/cookbook/daemonizing.html

#. To parse events submitted as emails to an imap server, add to a cron file::

   cd /usr/local/gridcalendar ; python /usr/local/gridcalendar/manage.py imap

#. For Apache as the webserver
   
    #. Install Apache and the package ``libapache2-mod-wsgi``
      
    #. For an Apache Virtual Server, you need to use something like the following as ``/etc/apache2/sites-available/gridcalendar.net``::

        <VirtualHost *:80>
            ServerName gridcalendar.net
            ServerAlias www.gridcalendar.net
            DocumentRoot /var/www/gridcalendar.net
            ServerAdmin admin@example.com
        
            # Logfiles:
            CustomLog /var/log/apache2/gridcalendar.net.log combined
            ErrorLog /var/log/apache2/gridcalendar.net.error.log
            LogLevel warn
         
            Alias /robots.txt /var/www/gridcalendar.net/robots.txt
            Alias /m/ /var/www/gridcalendar.net/m/
            Alias /favicon.ico /var/www/gridcalendar.net/m/favicon.ico

            WSGIScriptAlias / /usr/local/gridcalendar/apache/django.wsgi
        
        </VirtualHost>

    #. Make ``/var/www/gridcalendar.net/m/`` a symbolic link to ``/usr/local/gridcalendar/media`` and make sure Apache can read it::

        ln -s /usr/local/gridcalendar/media /var/www/gridcalendar.net/m/

    #. The same for ``favicon.ico``::

        ln -s /usr/local/gridcalendar/media/favicon.ico /var/www/gridcalendar.net/favicon.ico

    #. Don't forgett to create a file ``/var/www/gridcalendar/robots.txt`` for the search engines, see http://en.wikipedia.org/wiki/Robots.txt

#. If you want to develop GridCalendar:
   
   #. Install ``MultipartPostHandler``, ``python-django-debug-toolbar``, ``python-profiler``,
      ``python-webtest`` and ``django-webtest``. webtest version 1.3 is needed for
      Django 1.3. As root::

          aptitude install python-django-debug-toolbar python-profiler
          pip install django-webtest
          pip install MultipartPostHandler

   #. Set in ``settings_local.py`` (see below) the variable ``DEBUG`` to ``True`` and add the
      IP(s) you use when developing. Example::

          DEBUG = True
          INTERNAL_IPS = ('127.0.0.1',)

   #. You can run a web test server with ``python manage.py testserver``

   #. To run the tests, issue ``python manage.py tests``. If you see an error saying that 404.html
      could not been found, you need to set ``DEBUG`` to ``False`` before running the tests

#. If Apache is used, for development it is recommended to include the following line in ``/etc/apache2/apache2.conf``. It makes the server start a new proccess for every request, in order to read the source code for each request. Remove this in the production server for performance reasons::

        MaxRequestsPerChild 1
   
#. configuring postgresql:
   
    #. as root edit your ``/etc/postgresql/8.4/main/pg_hba.conf`` file to include the line: ``local all gridcalendar md5``

    #. reload the configuration: ``killall -HUP postgres``

    #. as user ``postgres`` download and execute the script `create_template_postgis-debian.sh` and
    run it::

        su postgres
        cd ~
        wget http://docs.djangoproject.com/en/1.3/_downloads/create_template_postgis-debian.sh
        chmod +x create_template_postgis-debian.sh
        ./create_template_postgis-debian.sh

    #. create the GridCalendar ``postgres`` user with a password. Command line session example::

        su postgres
        createuser --pwprompt gridcalendar
        Enter password for new role: xxx
        Enter it again: xxx
        Shall the new role be a superuser? (y/n) n
        Shall the new role be allowed to create databases? (y/n) y
        Shall the new role be allowed to create more new roles? (y/n) n

    #. create the gridcalendar database (use the same password as before)::

        createdb -U gridcalendar -O gridcalendar --password -T template_postgis gridcalendar

       If you get the error::

        createdb: database creation failed: ERROR:  permission denied to copy database "template_postgis"

       then you need first to::

        psql
        update pg_database set datistemplate = true where datname = 'template_postgis';

    #. modify settings_local.py to use postgresql. Example::

        DATABASES = {  
            'default': {  
                 'ENGINE': 'django.contrib.gis.db.backends.postgis',
                 'NAME': 'gridcalendar',
                 'USER': 'gridcalendar',           
                 'PASSWORD': 'a_password',
             }
        }

    #. Make Django create the needed database tables. In the proccess you can create a superuser::

        $ cd /usr/local/gridcalendar/
        $ python manage.py syncdb
        ...
        You just installed Django's auth system, which means you don't have any superusers defined.
        Would you like to create one now? (yes/no): no
        ...

    #. Configure the ``django_site`` table. **Important note**: the first entry in this table is
       used when sending emails, e.g. by ``events/management/commands/imap.py``
       which can be used by a cronjob to read and reply emails (see above). As root you can update the table with::

        su postgre
        psql gridcalendar
        update django_site set domain='gridcalendar.net' where id=1 ;
        update django_site set name='Grid Calendar' where id=1 ;

#. **Emails**: the system gets and sends emails. See the ``settings_local.py`` file for the settings
   of it.

    #. Group invitations are sent with the sender (``from`` header) set to the user
       ``group-invitation`` and the host provided by the setting ``DEFAULT_FROM_EMAIL``
 
#. **Graph of the data base**: To generate a graph of the data base::

    cd /usr/local/gridcalendar/
    aptitude install graphviz ttf-liberation
    wget http://djangosnippets.org/snippets/1168/download/
    export PYTHONPATH="/home/hg/gridcalendar:/home/hg/"
    export DJANGO_SETTINGS_MODULE="gridcalendar.settings"
    python graph_db.py events | dot -Tpng -o media/graph_db.png

#. Dates and times with **leading and/or trailing spaces in web forms**. At this time (Tue May 3
   21:38:28 CEST 2011) there is an open ticket (`#6362`_) for it in Django. Several approaches (like
   `snippet 656`_) don't work for ModelForms used with ``inlineformset_factory`` (probably a Django
   bug). Until `#6362`_ is fixed, you can modify
   ``/usr/lib/pymodules/python2.6/django/forms/fields.py`` and add in the body of the function
   ``to_python`` of ``DateField`` and ``TimeField``::

        if hasattr(value, 'strip'): value = value.strip()

#. Some notes on installing GridCalendar with nginx_ and uwsgi_

    - If you have problems uwsgi_ using ``python2.6`` instead of ``python2.7``::

        update-alternatives --config uwsgi

    - ``/etc/uwsgi/apps-available/gridcalendar.ini`` example::

        [uwsgi]
        uid = www-data
        gid = www-data
        socket = /tmp/uwsgi-gridcalendar.sock
        processes = 4
        plugins = http python
        module = django.core.handlers.wsgi:WSGIHandler()
        pythonpath = /usr/local/lib
        chdir = /usr/local/lib/gridcalendar
        env = DJANGO_SETTINGS_MODULE=gridcalendar.settings
        env = CELERY_LOADER=django

    - ``/etc/nginx/sites-available/grical.org`` example::

        # uWSGI serving Django.
        upstream django {
          # Distribute requests to servers based on client IP. This keeps load
          # balancing fair but consistent per-client. In this instance we're
          # only using one uWGSI worker anyway.
          ip_hash;
          server unix:///tmp/uwsgi-gridcalendar.sock;
        }

        server {
          listen      80;
          server_name staff.grical.org;
          charset     utf-8;

          location /media/admin/ {
            alias /usr/share/pyshared/django/contrib/admin/media/;
            access_log off;
            expires 7d;
          }

          location /m/ {
            alias /usr/local/lib/gridcalendar/media/;
            access_log off;
            expires 7d;
          }

          location /favicon.ico {
            alias /usr/local/lib/gridcalendar/media/favicon.ico;
            access_log off;
            expires 7d;
          }

          location /robots.txt {
            alias /usr/local/lib/gridcalendar/media/robots.txt;
            access_log off;
            expires 7d;
          }

          # Finally, send all non-media requests to the Django server.
          location / {
            uwsgi_pass  django;
            include     uwsgi_params;
          }
        }

    - ``/etc/nginx/nginx.conf`` example::

        user www-data;
        worker_processes 1;
        pid /var/run/nginx.pid;

        events {
                worker_connections 1024;
                # multi_accept on;
        }

        http {

                ##
                # Basic Settings
                ##

                sendfile on;
                client_max_body_size  20m;
                tcp_nopush on;
                tcp_nodelay on;
                keepalive_timeout 65;
                types_hash_max_size 2048;
                # server_tokens off;

                # server_names_hash_bucket_size 64;
                # server_name_in_redirect off;

                include /etc/nginx/mime.types;
                default_type application/octet-stream;

                ##
                # Logging Settings
                ##

                access_log /var/log/nginx/access.log;
                error_log /var/log/nginx/error.log;

                ##
                # Gzip Settings
                ##

                gzip on;
                gzip_disable "msie6";

                # gzip_vary on;
                # gzip_proxied any;
                # gzip_comp_level 6;
                # gzip_buffers 16 8k;
                # gzip_http_version 1.1;
                gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
                ##
                # Virtual Host Configs
                ##

                include /etc/nginx/conf.d/*.conf;
                include /etc/nginx/sites-enabled/*;
        }

.. _#6362: http://code.djangoproject.com/ticket/6362
.. _snippet 656: http://www.djangosnippets.org/snippets/956/
.. _github: https://github.com/
.. _oEmbed: https://secure.wikimedia.org/wikipedia/en/wiki/OEmbed
.. _nginx: https://secure.wikimedia.org/wikipedia/en/wiki/Nginx
.. _uwsgi: http://projects.unbit.it/uwsgi/
