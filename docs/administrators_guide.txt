.. _administrators_guide:

=====================
Administrator's guide
=====================

Installation
============

Prerequisites
-------------

====================== =========
Prerequisite           Version
====================== =========
Operating system [1]
Python                 2.6 [2]
PostgreSQL             8.4 [3]
PostGIS                1.4 [4]
psycopg2               2.2 [5]
pip or setuptools [6]
docutils               0.7 [7]
dateutil               1.4 [7]
geoip                  1.2 [7]
vobject                0.8 [7]
gdal                   3.09 [7]
tz                     2010b [7]
blist                  1.3 [7]
yaml                   3.10 [7]
irclib                 0.4 [8]
memcache               1.45 [7]
jQuery Core            1.4 [9]
jQuery UI              1.8 [9]
rabbitmq               1.8 [10]
Django                 1.3
django-registration    0.7 [7]
django-tagging         0.3 [7]
django-reversion       1.5 [7]
django-tables          0.2 [7]
django-celery          2.4 [7]
django-oembed          0.1 [7]
Mercurial [11]
====================== =========

.. admonition:: Note for production installations

   These prerequisites are for development installations. For
   production installations you also need a web server.

[1] We currently develop, test and deploy GridCalendar on Debian-based
distributions.  You should not have any trouble running it on other
GNU/Linux distributions.  We do not support it on Windows at the time,
but it should not be too hard to get it to run there. Installing
64-bit versions on Windows may be difficult because of lack of
dependencies compiled for 64-bit Windows. If you need help, email us.

[2] GridCalendar runs on Python 2.6 or any later 2.x version. It does
not run on Python 3.

[3] GridCalendar is known to run on PostgreSQL 8.4. It is also likely
to run without problems on 8.3 and on 9.0. In order to avoid possible
incompatibilities with psycopg2 and PostGIS, it is better to use the
version prepackaged by your operating system.

[4] Except for PostGIS, more libraries could be needed, such as geos
and proj; however, you probably not need to worry about that, because
in most GNU/Linux distributions PostGIS has a dependency on them and
therefore they will be installed automatically. GridCalendar is known
to run on PostGIS 1.5. It can probably run on later versions as well.
It is not known whether it can run on earlier versions.

[5] Because of a `Django bug`_ which is present in Django versions up
to and including 1.3, tests fail on psycopg2 2.4.2 or later. Therefore
you should either use Django 1.4 or later, or psycopg2 no later than
2.4.1, or not expect the tests to run.

.. _Django bug: https://code.djangoproject.com/ticket/16250

[6] pip or setuptools are useful in order to install the rest of the
Python modules; GridCalendar does not actually need it.

[7] The table indicates the versions of various Python and Django
modules on which GridCalendar is known to run. Usually it can run on
later versions as well.

[8] irclib is needed only if you want to use the IRC logging features
of GridCalendar.

[9] GridCalendar is known to run on JQuery 1.4 and JQuery UI 1.8. It
can probably run on later versions as well (and maybe also on earlier
versions).

[10] Another AMQP server might also work; however, we have only ever
tested it with RabbitMQ 1.8. Later versions should also work.

[11] Mercurial is needed in order to download the software, not for
running it.

.. admonition:: Example: Installing prerequisites on a virtualenv on Debian 6.0

   First, it is best to be certain that the active locale is UTF-8 (we
   use en_DK.UTF-8, because en_DK has the added advantage that it
   displays dates in ISO8601 format). When PostgreSQL is installed, it
   will automatically create a database cluster using the active
   locale, and it's better if the database templates use UTF-8::

      dpkg-reconfigure locales
      export LC_ALL=en_DK.UTF-8

   After setting :data:`LC_ALL` to a proper locale, as above, proceed
   to install everything::

      apt-get install python postgresql postgis postgresql-8.4-postgis \
          python-psycopg2 python-pip mercurial python-docutils \
          python-dateutil python-geoip python-vobject python-gdal \
          python-tz python-yaml python-irclib python-memcache libjs-jquery \
          libjs-jquery-ui rabbitmq-server python-virtualenv
      apt-get install build-essential python-dev   # Required for blist
      virtualenv $HOME/virtualenv
      export PATH=$HOME/virtualenv:$PATH
      pip install pip               # Upgrade of pip required for blist
      pip install blist django django-registration django-tagging \
          django-reversion django-tables django-celery django-oembed

Additional prerequisites for development
----------------------------------------

====================== =========
Prerequisite           Version
====================== =========
profiler
webtest                1.2
MultipartPostHandler
django-debug-toolbar
django-webtest
====================== =========

.. admonition:: Example: Installing prerequisites on Debian 6.0

   ::

       apt-get install python-profiler python-webtest
       pip install MultipartPostHandler django-debug-toolbar \
           django-webtest

Getting the software
--------------------

Clone the Mercurial repository http://gridcalendar.net:8001/::

   hg clone http://dev.grical.org:8001/ gridcalendar

This will create a :file:`gridcalendar` directory inside the current
directory, which should be somewhere inside your home directory for
a development instance, or :file:`/usr/local` for a production
instance.

Setting up the database
-----------------------

First, you need to create a spatially enabled database template. You
can skip this step if you have already done so. Otherwise, you need to
consult your PostgreSQL and PostGIS documentation.

.. admonition:: How to do it in Debian

   ::

      su postgres
      cd /tmp
      wget http://docs.djangoproject.com/en/1.3/_downloads/create_template_postgis-debian.sh
      chmod +x create_template_postgis-debian.sh
      ./create_template_postgis-debian.sh
      exit

Then you need to create a database user and a database (we use
``gridcalendar_user`` and ``gridcalendar_db`` in the examples below).
GridCalendar will be connecting to the database as that user. The user
should not be a super user, not be allowed to create databases, and
not be allowed to create more users.

.. admonition:: Example: creating a database in GNU

   Note: the commands below create a PostgreSQL user who does not have
   permission to create databases. This is appropriate for production.
   However, if you want the user to be able to run the tests, change
   the :data:`--no-createdb` parameter to :data:`--createdb`.

   ::

      sudo -u postgres -s
      createuser --pwprompt --no-createdb --no-createrole --no-superuser gridcalendar_user
      createdb --owner gridcalendar_user -T template_postgis gridcalendar_db
      exit

   You may also need to edit your ``pg_hba.conf`` file as needed
   (under ``/var/lib/pgsql/data/`` or ``/etc/postgresql/X.Y/main/``,
   depending on your system). The chapter on `client authentication`_
   of the PostgreSQL manual explains this in detail. A simple setup is
   to authenticate with username and password, in which case you
   should add or modify the following lines in ``pg_hba.conf``::

       local   all         all                               md5
       host    all         all         127.0.0.1/32          md5
       host    all         all         ::1/128               md5

   Restart the server to read the new ``pg_hba.conf`` configuration.
   For example, in Debian::

       /etc/init.d/postgresql restart

   .. _client authentication: http://www.postgresql.org/docs/8.4/static/client-authentication.html

Setting up GridCalendar
-----------------------

Copy the file :file:`settings_local.py.example` to
:file:`settings_local.py`, then open the new file in an editor and
make the following changes:

* Set :data:`ADMINS` to a list of admins (the administrators will get
  all enhydris exceptions by mail and also all user emails, as
  generated by the contact application).
* Under :data:`DATABASES`, set :data:`NAME` to the name of the
  database, and :data:`USER` and :data:`PASSWORD` according to the
  user created above.
* For a development installation, also set :data:`DEBUG` to ``True``
  and :data:`INTERNAL_IPS` to ``('127.0.0.1',)``.

Run the following to initialize the database and create the necessary
database tables for GridCalendar::

    python manage.py syncdb

Also copy or symlink the jQuery and jQuery UI files to the
:file:`media/js` and :file:`media/css` directories. For example, in
Debian 6.0::

   cd media
   ln -s /usr/share/javascript/jquery/jquery.min.js js/
   ln -s /usr/share/javascript/jquery-ui/jquery-ui.min.js js/
   ln -s /usr/share/javascript/jquery-ui/css/smoothness/jquery-ui.css css/
   ln -s /usr/share/javascript/jquery-ui/css/smoothness/images css/

Setting up Celery
-----------------

Add a RabbitMQ user and host::

   rabbitmqctl add_user guest guest
   rabbitmqctl add_vhost "/"
   rabbitmqctl set_permissions -p "/" guest ".*" ".*" ".*"

Run the celery worker server. See `Running Celery as a daemon`__. For
example, in the working directory::

   python manage.py celeryd -l info

Alternatively, copy the file ``celeryd`` in ``/etc/init.d/`` and make
it executable, then, as root, run::

   update-rc.d celeryd defaults

and create the file ``/etc/default/celeryd`` with the content::

   DJANGO_SETTINGS_MODULE="settings"
   DAEMON="/usr/local/gridcalendar/manage.py celeryd"
   CELERYD_USER="www-data"
   CELERYD_GROUP="www-data"
   DAEMON_ARGS="--time-limit=300 --concurrency=8"

If in trouble with this step, see
http://mattsnider.com/python/using-celery-to-handle-asynchronous-processes/

__ http://docs.celeryq.org/en/latest/cookbook/daemonizing.html


Running GridCalendar
--------------------

Run the following command::

    python manage.py runserver 8088

The above command will start the Django development server and set it
to listen to port 8088. If you then start your browser and point it to
``http://localhost:8088/``, you should see GridCalendar in action. Note
that this only listens to the localhost; if you want it to listen on
all interfaces, use ``0.0.0.0:8088`` instead.

To use GridCalendar in production, you need to setup a web server such
as apache. This is described in detail in `Deploying Django`_.

.. _deploying django: http://docs.djangoproject.com/en/1.1/howto/deployment/

Advanced GridCalendar configuration
-----------------------------------

IRC
^^^

GridCalendar can log into an IRC channel. To use the IRC logger,
configure the :data:`IRC_NETWORK`, :data:`IRC_PORT`, :data:`IRC_NICK`,
:data:`IRC_NAME` and :data:`IRC_CHANNEL` configuration settings, and
start the IRC logger with::

   python manage.py irclogger

GeoIP database
^^^^^^^^^^^^^^

Except for installing the python ``geoip``, you also need an IP
database. If you have installed the Debian ``python-geoip`` package,
it will also have automatically installed its default database,
``geoip-database``, which relates IPs to countries. If you want to
locate the users' cities, you need to download another database.
Debian has an automatic downloader::

   apt-get install geoip-database-contrib

If your operating system does not have such a downloader, download it
yourself, like this::
    
   cd /usr/share/GeoIP
   wget http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz
   gunzip GeoLiteCity.dat.gz

Make certain you read the license_ for the database.

.. _license: http://geolite.maxmind.com/download/geoip/database/LICENSE.txt

IMAP
^^^^

Events can be submitted by sending email to GridCalendar. To activate
this, GridCalendar must periodically process emails on an IMAP server.
To activate this functionality, set the :data:`IMAP_SERVER`,
:data:`IMAP_LOGIN`, :data:`IMAP_PASSWD` and :data:`IMAP_SSL`
configuration settings and set the following command to be run
periodically (e.g. with cron)::

     python manage.py imap

memcached
^^^^^^^^^

memcached_ is recommended on production environments; GridCalendar
will automatically use it for performance. For example, in Debian
6.0::

  apt-get install memcached

then edit :file:`/etc/memcached.conf` and restart memcached.

.. _memcached: http://memcached.org/


Miscellaneous
-------------

#. If you have already a database running and have some data or you import data e.g. with
   ``manage.py loadata``, you should create manually a first revision, for this issue the
   commands::

        ./manage.py createinitialrevisions
        ./manage.py createrevisioninfo

   #. To run the tests, issue ``python manage.py tests``. If you see an error saying that 404.html
      could not been found, you need to set ``DEBUG`` to ``False`` before running the tests

#. For Apache as the webserver
   
    #. Install Apache and the package ``libapache2-mod-wsgi``
      
    #. For an Apache Virtual Server, you need to use something like the following as ``/etc/apache2/sites-available/gridcalendar.net``::

        <VirtualHost *:80>
            ServerName gridcalendar.net
            ServerAlias www.gridcalendar.net
            DocumentRoot /var/www/gridcalendar.net
            ServerAdmin admin@example.com
        
            # Logfiles:
            CustomLog /var/log/apache2/gridcalendar.net.log combined
            ErrorLog /var/log/apache2/gridcalendar.net.error.log
            LogLevel warn
         
            Alias /robots.txt /var/www/gridcalendar.net/robots.txt
            Alias /m/ /var/www/gridcalendar.net/m/
            Alias /favicon.ico /var/www/gridcalendar.net/m/favicon.ico

            WSGIScriptAlias / /usr/local/gridcalendar/apache/django.wsgi
        
        </VirtualHost>

#. Make ``/var/www/gridcalendar.net/m/`` a symbolic link to ``/usr/local/gridcalendar/media`` and make sure Apache can read it::

        ln -s /usr/local/gridcalendar/media /var/www/gridcalendar.net/m/

#. The same for ``favicon.ico``::

        ln -s /usr/local/gridcalendar/media/favicon.ico /var/www/gridcalendar.net/favicon.ico

#. Don't forgett to create a file ``/var/www/gridcalendar/robots.txt`` for the search engines, see http://en.wikipedia.org/wiki/Robots.txt

#. Configure the ``django_site`` table. **Important note**: the first entry in this table is
   used when sending emails, e.g. by ``events/management/commands/imap.py``
   which can be used by a cronjob to read and reply emails (see above). As root you can update the table with::

    su postgre
    psql gridcalendar
    update django_site set domain='gridcalendar.net' where id=1 ;
    update django_site set name='Grid Calendar' where id=1 ;

#. **Emails**: the system gets and sends emails. See the ``settings_local.py`` file for the settings
   of it.

    #. Group invitations are sent with the sender (``from`` header) set to the user
       ``group-invitation`` and the host provided by the setting ``DEFAULT_FROM_EMAIL``
 
#. **Graph of the data base**: To generate a graph of the data base::

    cd /usr/local/gridcalendar/
    aptitude install graphviz ttf-liberation
    wget http://djangosnippets.org/snippets/1168/download/
    export PYTHONPATH="/home/hg/gridcalendar:/home/hg/"
    export DJANGO_SETTINGS_MODULE="gridcalendar.settings"
    python graph_db.py events | dot -Tpng -o media/graph_db.png

#. Dates and times with **leading and/or trailing spaces in web forms**. At this time (Tue May 3
   21:38:28 CEST 2011) there is an open ticket (`#6362`_) for it in Django. Several approaches (like
   `snippet 656`_) don't work for ModelForms used with ``inlineformset_factory`` (probably a Django
   bug). Until `#6362`_ is fixed, you can modify
   ``/usr/lib/pymodules/python2.6/django/forms/fields.py`` and add in the body of the function
   ``to_python`` of ``DateField`` and ``TimeField``::

        if hasattr(value, 'strip'): value = value.strip()

.. _#6362: http://code.djangoproject.com/ticket/6362
.. _snippet 656: http://www.djangosnippets.org/snippets/956/

#. You need to cleanup the sessions table from time to time (see
   `clearing the session table in the Django documentation`__).
   Add to a cron file something like::

        00 02 * * * cd /usr/local/gridcalendar ; python manage.py cleanup

__ https://docs.djangoproject.com/en/dev/topics/http/sessions/#clearing-the-session-table

#. Creates the cache table::

   ./manage.py createcachetable cache

#. Some notes on installing GridCalendar with nginx_ and uwsgi_

    - If you have problems uwsgi_ using ``python2.6`` instead of ``python2.7``::

        update-alternatives --config uwsgi

    - ``/etc/uwsgi/apps-available/gridcalendar.ini`` example::

        [uwsgi]
        uid = www-data
        gid = www-data
        socket = /tmp/uwsgi-gridcalendar.sock
        processes = 4
        plugins = http python
        module = django.core.handlers.wsgi:WSGIHandler()
        pythonpath = /usr/local/lib
        chdir = /usr/local/lib/gridcalendar
        env = DJANGO_SETTINGS_MODULE=gridcalendar.settings
        env = CELERY_LOADER=django

    - ``/etc/nginx/sites-available/grical.org`` example::

        # uWSGI serving Django.
        upstream django {
          # Distribute requests to servers based on client IP. This keeps load
          # balancing fair but consistent per-client. In this instance we're
          # only using one uWGSI worker anyway.
          ip_hash;
          server unix:///tmp/uwsgi-gridcalendar.sock;
        }

        server {
          listen      80;
          server_name staff.grical.org;
          charset     utf-8;

          location /media/admin/ {
            alias /usr/share/pyshared/django/contrib/admin/media/;
            access_log off;
            expires 7d;
          }

          location /m/ {
            alias /usr/local/lib/gridcalendar/media/;
            access_log off;
            expires 7d;
          }

          location /favicon.ico {
            alias /usr/local/lib/gridcalendar/media/favicon.ico;
            access_log off;
            expires 7d;
          }

          location /robots.txt {
            alias /usr/local/lib/gridcalendar/media/robots.txt;
            access_log off;
            expires 7d;
          }

          # Finally, send all non-media requests to the Django server.
          location / {
            uwsgi_pass  django;
            include     uwsgi_params;
          }
        }

    - ``/etc/nginx/nginx.conf`` example::

        user www-data;
        worker_processes 1;
        pid /var/run/nginx.pid;

        events {
                worker_connections 1024;
                # multi_accept on;
        }

        http {

                ##
                # Basic Settings
                ##

                sendfile on;
                client_max_body_size  20m;
                tcp_nopush on;
                tcp_nodelay on;
                keepalive_timeout 65;
                types_hash_max_size 2048;
                # server_tokens off;

                # server_names_hash_bucket_size 64;
                # server_name_in_redirect off;

                include /etc/nginx/mime.types;
                default_type application/octet-stream;

                ##
                # Logging Settings
                ##

                access_log /var/log/nginx/access.log;
                error_log /var/log/nginx/error.log;

                ##
                # Gzip Settings
                ##

                gzip on;
                gzip_disable "msie6";

                # gzip_vary on;
                # gzip_proxied any;
                # gzip_comp_level 6;
                # gzip_buffers 16 8k;
                # gzip_http_version 1.1;
                gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
                ##
                # Virtual Host Configs
                ##

                include /etc/nginx/conf.d/*.conf;
                include /etc/nginx/sites-enabled/*;
        }

.. _nginx: https://secure.wikimedia.org/wikipedia/en/wiki/Nginx
.. _uwsgi: http://projects.unbit.it/uwsgi/
