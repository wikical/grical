#! /usr/bin/python

from django.core.management import setup_environ
import settings
setup_environ(settings)

from django.contrib.auth.models import User
from gridcalendar.gridcal.models import Event, Group, Membership, Calendar, Filter


events_how_many = 3

#-------------------- create some userless events ----------------
event_c = 0
while event_c < events_how_many:
    for pv in [True, False]:
        if pv:
            pv_str = 'PUBLIC'
        else:
            pv_str = 'NON-PUBLIC'
        e = Event(
            acro =          'ACRO',
            title =         "EVENT " + str(event_c) + " USERLESS " + pv_str,
            start =         '2010-03-15',
            end =           '2010-04-15',
            public_edit =   False,
            public_view =   pv,
            # tags =          'tag',
            country =       'DE',
            city =          'Berlin',
            postcode =      '10439',
            address =       'Random Street 3',
            latitude =      50.32323,
            longitude =     13.83245,
            timezone =      60,
            description =   'Event description.'
            )
        try:
            e.save()
            print "OK    SAVING EVENT: " + str(event_c) + " " + pv_str
        except:
            print "ERROR SAVING EVENT: " + str(event_c) + " " + pv_str
    event_c += 1


#----------------- create some users and let them create some events ----------------

for user_id in range(1, 5):
    u = User.objects.create_user(
        username =  'u' + str(user_id),
        email =     'test' + str(user_id) + '@gridcalendar.org',
        password =  'p',
        )
    u.is_staff = True
    u.is_superuser = True
    try:
        u.save()
        print "OK    SAVING USER: " + str(user_id)
    except:
        print "ERROR SAVING USER: " + str(user_id)

    filter = Filter(user=u,
        query = 'berlin',
        name = u.username + "'s filter: " + "berlin"
        )
    filter.save()

    event_c = 0
    while event_c < events_how_many:
        for pv in [True, False]:
            if pv:
                pv_str = 'PUBLIC'
            else:
                pv_str = 'NON-PUBLIC'
            e = Event(
                    user = u,
                    acro =          'ACRO',
                    title =         "EVENT "+ str(event_c) + " USER " + str(user_id) + " " + pv_str,
                    start =         '2010-03-15',
                    end =           '2010-04-15',
                    public_edit =   False,
                    public_view =   pv,
                    # tags =          'tag',
                    country =       'DE',
                    city =          'Berlin',
                    postcode =      '10439',
                    address =       'Random Street 3',
                    latitude =      50.32323,
                    longitude =     13.83245,
                    timezone =      60,
                    description =   'Event description.'
                    )
            try:
                e.save()
                print "OK    SAVING EVENT: " + str(event_c) + " " + pv_str
            except:
                print "ERROR SAVING EVENT: " + str(event_c) + " " + pv_str
        event_c += 1

#------ create some groups ---------------------------------------

gu = [
    [1, 2],
    [1, 3]
]


for group_id in range(1, 3):
    g = Group(
        name =  'g' + str(group_id),
        description =     'test description' + str(group_id),
        )
    try:
        g.save()
        print "OK    SAVING GROUP: " + str(group_id)
    except:
        print "ERROR SAVING GROUP: " + str(group_id)

    for user_id in gu[group_id-1]:
        u = User.objects.get(id=user_id)
        member1 = Membership(
            group = g,
            user = u,
            new_member_email = 'test@example.org',
        )
        member1.save()

#------ add some events to groups ------------------------


event_id = 1
allev = Event.objects.all()
while event_id < len(allev):
        e = Event.objects.get(id=event_id)
        group_id = 1
        g = Group.objects.get(id=group_id)
        cal1 = Calendar(
            event = e,
            group = g,
        )
        cal1.save()
        event_id += 3

event_id = 2
allev = Event.objects.all()
while event_id < len(allev):
        e = Event.objects.get(id=event_id)
        group_id = 2
        g = Group.objects.get(id=group_id)
        cal1 = Calendar(
            event = e,
            group = g,
        )
        cal1.save()
        event_id += 3


#------ add some filters to users ------------------------

