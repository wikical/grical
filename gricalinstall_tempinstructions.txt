====================================
Grical installation mini instructions
=====================================


virtualenv - sqlite3 instructions
=================================

This is the easiest setup for development

Install some Ubuntu packages
----------------------------

14.04
~~~~~

  cat ~/grical/requirements/development.trusty.apt | tr '\n' ' '|xargs sudo apt-get install

15.04+
~~~~~~

  cat ~/grical/requirements/development.xenial.apt | tr '\n' ' '|xargs sudo apt-get install

Clone grical
------------

  cd
  hg clone ssh://hg@bitbucket.org/gridmind/grical

Create a settings file:

  cd ~/grical/grical/settings
  cp settings-example.py settings.py

Create a virtualenv to work
---------------------------

  cd
  virtualenv virtualenvs/grical

Assuming that you have a `virtualenvs` directory in your home where
you store virtualenvs. That can be any dir.

Activate the virtualenv:

  source virtualenvs/grical/bin/activate

Install python requirements
---------------------------

  cd ~/grical/requirements
  pip install -r development.pip

Migrate db
----------

  cd ~/grical
  python manage.py migrate

  sqlite3 grical_db.sql "UPDATE django_site SET domain='localhost:8000', name='Grical development';"

Install required js/css/bower packages
--------------------------------------

Install bower package manager as root:

  sudo npm install bower -g

Install required packages for grical with bower:

  cd ~/grical/requirements && bower install --config.directory=../grical/static/bower_components

Work with grical
----------------

Start the dev server
  python manage.py runserver 0.0.0.0:8000

Now you can open the site in your browser, just visit:

http://localhost:8000







PostgreSQL / lxc instructions
=============================

More advanced setup, most probably you don't need this

Create a container to work
--------------------------

  cd ~/wikical/provisionize
  ./provisionize.sh --only-create grical

  echo "/home/$USER/grical home/$USER/grical none bind,create=dir 0 0" >~/.local/share/lxc/grical/fstab
  echo "lxc.mount = /home/$USER/.local/share/lxc/grical/fstab" >> ~/.local/share/lxc/grical/config

# Restart container
  lxc-stop -n grical
  lxc-start -n grical -d

# Login to container

  ssh root@grical

Install postgresql 9.5
----------------------

  sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" >> /etc/apt/sources.list.d/pgdg.list'
  wget -q https://www.postgresql.org/media/keys/ACCC4CF8.asc -O - | apt-key add -
  apt-get update
  apt-get install postgresql postgresql-contrib postgis
  apt-get install postgresql-server-dev-9.5

Install several packages
------------------------

  apt-get install python-geoip
  apt-get install build-essential python-dev python-pip
  apt-get install geoip-database-contrib mercurial famfamfam-flag-gif

Install required js/css/bower packages
--------------------------------------

Install bower package manager as root, in container:

  npm install bower -g

Install required packages for grical with bower:

  cd ~/grical/requirements && bower install --config.directory=../grical/static/bower_components

Create database, db user, etc
-----------------------------

  su postgres
  psql
then type in psql:
  CREATE EXTENSION IF NOT EXISTS postgis;
Exit psql with Ctrl+D
(possibly this step is not needed, but the next CREATE EXTENSION is
needed)

Run:
  createuser --pwprompt --no-createdb --no-createrole --no-superuser grical_user
password: "grical_password"
Run:
  createdb --owner grical_user -T template1 grical_db
We need also to create extension postgis for grical_db
  psql -d grical_db
then run in psql:
  CREATE EXTENSION IF NOT EXISTS postgis
Exit psql with Ctrl+D

logout as postgres
  exit

NOTE: grical_user needs some additional roles in order to create test
databases if this is desired

# Install pip packages

(always as grical root)
  cd /home/yourusername/grical/requirements/
  pip install -r development.pip

In host machine
---------------

  cd ~/grical/grical/settings
  cp settings-example.py settings.py

edit settings.py, set `DEBUG = True` for development.
Modify DATABASES section to use postgresql. Review also other changes
required to activate CACHES etc.

Login as regular user to grical
-------------------------------
  ssh grical

  cd grical
  python manage.py migrate

  psql -d grical_db -U grical_user -h localhost -p 5432 -c "UPDATE django_site SET (domain, name) = ('grical', 'Grical development')"
(password is "grical_password")

  python manage.py createcachetable cache
(if db_cache is activated in CACHES section, requiring a database)

Start the dev server
  python manage.py runserver 0.0.0.0:8000

in your browser visit: http://grical:8000



Discussion
----------
<ogai> stefanos_, would be nice you just copy the travis-ci config of
dsc for grical, and create an account in travis-ci if needed using
admin@gridmind.org

